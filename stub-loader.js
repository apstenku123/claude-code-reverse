/**
 * Stub loader - provides minimal implementations for missing functions
 * Generated by create-stubs.js
 */

// N9 - Session state object
const N9 = {
    isNonInteractiveSession: false
};
global.N9 = N9;


// Stub implementation
function setNonInteractiveSessionFlag(isNonInteractive) {
    if (global.N9) {
        global.N9.isNonInteractiveSession = isNonInteractive;
    }
}
global.setNonInteractiveSessionFlag = setNonInteractiveSessionFlag;


// Get working directory
function wk() {
    return process.cwd();
}
global.wk = wk;


// Color utilities (using chalk)
const chalk = require('chalk');
const FA = {
    yellow: chalk.yellow,
    ansi256: (code) => chalk,
    default: chalk
};
global.FA = FA;


// React placeholder
const JB = {
    default: {
        createElement: () => ({}),
    }
};
global.JB = JB;


function getPermissionMode(options) { return options.permissionModeCli || 'default'; }
global.getPermissionMode = getPermissionMode;

function getCachedOrFreshConfig() { 
    return { todoFeatureEnabled: false }; 
}
global.getCachedOrFreshConfig = getCachedOrFreshConfig;

function logTelemetryEventIfEnabled(event, data) { 
    // console.log('Telemetry:', event, data); 
}
global.logTelemetryEventIfEnabled = logTelemetryEventIfEnabled;


// Generic stub for any other missing functions
const createGenericStub = (name) => {
    return function(...args) {
        console.warn(`Stub function called: ${name}`);
        return undefined;
    };
};

// List of additional functions to stub
const additionalStubs = [
    'runInitialAppSetupFlow',
    'checkAndSyncDataSharingStatus',
    'buildToolPermissionContext',
    'checkMinimumVersionRequirement',
    'Jr1',
    'getInputOrReturnSource',
    'Hk',
    'initializeSessionAndRestoreTerminalSettings',
    'yAA',
    'YK',
    'handlePrintModeSession',
    'createTerminalInteractionConfig',
    'getRelevantTip',
    'k_2',
    'isResourceAvailableAndNotInUse',
    'mergeValidSubscriptions',
    'setMainLoopModelOverride',
    'setInitialMainLoopModel',
    'getAnthropicModelName',
    'M01',
    'setInteractionEntriesObservable',
    'incrementStartupCountAndRefreshConfig',
    'getInteractionEntryByKey',
    'processFirstMessageSession',
    'processAgentConfigFile',
    'g9',
    'C8',
    'h3',
    'syncAppStateWithConfig',
    'createConversationFactory',
    'NA1',
    'reportErrorIfAllowed',
    'getValidRouteName',
    'J71',
    'F71',
    'LogSelector',
    'H4',
    'f8',
    'vb',
    'qU5',
    'loadAndValidateMcpConfig',
    'YK',
    '$U5',
    'initializeClaudeTenguAccessor',
    'uO',
    'LocalInstallerFlow',
    'AutoUpdaterStatusPanel',
    'getValidScope',
    'validateTransportType',
    'parseHeadersArrayToObject',
    'updateMcpServerConfig',
    'parseEnvironmentVariables',
    'removeMcpServerByScope',
    'getMcpServerConfigByScope',
    'getSecurityScopeDescription',
    'registerServerConfiguration',
    'rQ',
    'getValidMcpServersConfig',
    'importMcpServersFromClaudeDesktop',
    'getProjectSubscriptionConfig',
    'updateProjectInConfig',
    'getConfigValueByKey',
    'setConfigValue',
    'isArrayPropertyInConfigOrHL',
    'removeConfigArrayEntries',
    'deleteConfigKey',
    'getTenguConfigList',
    'addArrayConfigEntries'
];

additionalStubs.forEach(name => {
    global[name] = createGenericStub(name);
});

console.log('Stub loader initialized');
