#!/usr/bin/env node
/**
 * Copyright (c) 2025 davidgornshtein@gmail.com
 * Licensed for non-commercial use only. For commercial use, please contact davidgornshtein@gmail.com
 * 
 * File: tools/create-stubs.js
 * File name: create-stubs.js
 * Author: davidgornshtein@gmail.com
 * Description: Creates stub implementations for missing functions
 * Purpose: Makes the CLI runnable by providing minimal implementations
 * Patterns: Stub generation, dependency resolution
 */

const fs = require('fs');
const path = require('path');

// Common stub implementations
const STUBS = {
    // Global objects
    N9: `// N9 - Session state object
const N9 = {
    isNonInteractiveSession: false
};
global.N9 = N9;
`,
    
    // Functions that need basic implementations
    setNonInteractiveSessionFlag: `// Stub implementation
function setNonInteractiveSessionFlag(isNonInteractive) {
    if (global.N9) {
        global.N9.isNonInteractiveSession = isNonInteractive;
    }
}
global.setNonInteractiveSessionFlag = setNonInteractiveSessionFlag;
`,
    
    wk: `// Get working directory
function wk() {
    return process.cwd();
}
global.wk = wk;
`,
    
    FA: `// Color utilities (using chalk)
const chalk = require('chalk');
const FA = {
    yellow: chalk.yellow,
    ansi256: (code) => chalk,
    default: chalk
};
global.FA = FA;
`,
    
    JB: `// React placeholder
const JB = {
    default: {
        createElement: () => ({}),
    }
};
global.JB = JB;
`,
    
    // Add more stubs as needed
    getPermissionMode: `function getPermissionMode(options) { return options.permissionModeCli || 'default'; }
global.getPermissionMode = getPermissionMode;`,
    
    getCachedOrFreshConfig: `function getCachedOrFreshConfig() { 
    return { todoFeatureEnabled: false }; 
}
global.getCachedOrFreshConfig = getCachedOrFreshConfig;`,
    
    logTelemetryEventIfEnabled: `function logTelemetryEventIfEnabled(event, data) { 
    // console.log('Telemetry:', event, data); 
}
global.logTelemetryEventIfEnabled = logTelemetryEventIfEnabled;`,
};

// Create a stub loader module
function createStubLoader() {
    const stubLoaderPath = path.join(__dirname, '../stub-loader.js');
    
    let content = `/**
 * Stub loader - provides minimal implementations for missing functions
 * Generated by create-stubs.js
 */

`;
    
    // Add all stubs
    for (const [name, implementation] of Object.entries(STUBS)) {
        content += implementation + '\n\n';
    }
    
    // Add a catch-all for other missing functions
    content += `
// Generic stub for any other missing functions
const createGenericStub = (name) => {
    return function(...args) {
        console.warn(\`Stub function called: \${name}\`);
        return undefined;
    };
};

// List of additional functions to stub
const additionalStubs = [
    'runInitialAppSetupFlow',
    'checkAndSyncDataSharingStatus',
    'buildToolPermissionContext',
    'checkMinimumVersionRequirement',
    'Jr1',
    'getInputOrReturnSource',
    'Hk',
    'initializeSessionAndRestoreTerminalSettings',
    'yAA',
    'YK',
    'handlePrintModeSession',
    'createTerminalInteractionConfig',
    'getRelevantTip',
    'k_2',
    'isResourceAvailableAndNotInUse',
    'mergeValidSubscriptions',
    'setMainLoopModelOverride',
    'setInitialMainLoopModel',
    'getAnthropicModelName',
    'M01',
    'setInteractionEntriesObservable',
    'incrementStartupCountAndRefreshConfig',
    'getInteractionEntryByKey',
    'processFirstMessageSession',
    'processAgentConfigFile',
    'g9',
    'C8',
    'h3',
    'syncAppStateWithConfig',
    'createConversationFactory',
    'NA1',
    'reportErrorIfAllowed',
    'getValidRouteName',
    'J71',
    'F71',
    'LogSelector',
    'H4',
    'f8',
    'vb',
    'qU5',
    'loadAndValidateMcpConfig',
    'YK',
    '$U5',
    'initializeClaudeTenguAccessor',
    'uO',
    'LocalInstallerFlow',
    'AutoUpdaterStatusPanel',
    'getValidScope',
    'validateTransportType',
    'parseHeadersArrayToObject',
    'updateMcpServerConfig',
    'parseEnvironmentVariables',
    'removeMcpServerByScope',
    'getMcpServerConfigByScope',
    'getSecurityScopeDescription',
    'registerServerConfiguration',
    'rQ',
    'getValidMcpServersConfig',
    'importMcpServersFromClaudeDesktop',
    'getProjectSubscriptionConfig',
    'updateProjectInConfig',
    'getConfigValueByKey',
    'setConfigValue',
    'isArrayPropertyInConfigOrHL',
    'removeConfigArrayEntries',
    'deleteConfigKey',
    'getTenguConfigList',
    'addArrayConfigEntries'
];

additionalStubs.forEach(name => {
    global[name] = createGenericStub(name);
});

console.log('Stub loader initialized');
`;
    
    fs.writeFileSync(stubLoaderPath, content);
    console.log(`Created stub loader at: ${stubLoaderPath}`);
    
    return stubLoaderPath;
}

// Update the CLI to load stubs
function updateCliWithStubLoader(cliPath, stubLoaderPath) {
    const cliContent = fs.readFileSync(cliPath, 'utf-8');
    
    // Find where to insert the stub loader
    const insertPoint = cliContent.indexOf("'use strict';") + "'use strict';".length;
    
    // Create the require statement
    const stubRequire = `\n\n// Load stub implementations\nrequire('./stub-loader.js');\n`;
    
    // Insert the stub loader
    const updatedContent = 
        cliContent.slice(0, insertPoint) + 
        stubRequire + 
        cliContent.slice(insertPoint);
    
    // Write back
    fs.writeFileSync(cliPath, updatedContent);
    console.log(`Updated CLI to load stubs`);
}

// Main execution
if (require.main === module) {
    console.log('Creating stub implementations...\n');
    
    const stubLoaderPath = createStubLoader();
    const cliPath = path.join(__dirname, '../cli-organized.cjs');
    
    updateCliWithStubLoader(cliPath, stubLoaderPath);
    
    console.log('\nâœ“ Stubs created and CLI updated');
    console.log('The CLI should now run without missing function errors');
    console.log('\nNote: This provides minimal stub implementations.');
    console.log('Many features will not work, but the CLI should start.');
}

module.exports = { createStubLoader };