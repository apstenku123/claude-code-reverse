/**
 * Recursively maps keys from a string, array, or object to a configuration object.
 * Optionally transforms keys to lowercase and associates each key with a context and a value generated by getConfigOrObservableStatus.
 *
 * @param {string | Array<string> | Object} keysInput - The input keys to map. Can be a space-delimited string, an array of strings, or an object for recursive mapping.
 * @param {boolean} [shouldTransformToLowercase] - If true, transforms all keys to lowercase before mapping.
 * @param {string} [context=zd9] - The context to associate with each key. Used recursively when mapping objects.
 * @returns {Object} a configuration object mapping each key to an array: [context, getConfigOrObservableStatus(key, value)].
 */
function mapKeysToConfigWithTransform(keysInput, shouldTransformToLowercase, context = zd9) {
  const mappedConfig = {};

  // Helper function to process an array of key strings
  function processKeys(currentContext, keysArray) {
    // Optionally transform all keys to lowercase
    const processedKeys = shouldTransformToLowercase
      ? keysArray.map(key => key.toLowerCase())
      : keysArray;

    processedKeys.forEach(keyString => {
      // Split key and optional value by '|'
      const [key, value] = keyString.split('|');
      // Map the key to [context, getConfigOrObservableStatus(key, value)]
      mappedConfig[key] = [currentContext, getConfigOrObservableStatus(key, value)];
    });
  }

  if (typeof keysInput === "string") {
    // If input is a string, split by spaces and process
    processKeys(context, keysInput.split(" "));
  } else if (Array.isArray(keysInput)) {
    // If input is an array, process directly
    processKeys(context, keysInput);
  } else if (typeof keysInput === "object" && keysInput !== null) {
    // If input is an object, recursively map each property
    Object.keys(keysInput).forEach(propertyKey => {
      Object.assign(
        mappedConfig,
        mapKeysToConfigWithTransform(keysInput[propertyKey], shouldTransformToLowercase, propertyKey)
      );
    });
  }

  return mappedConfig;
}

module.exports = mapKeysToConfigWithTransform;