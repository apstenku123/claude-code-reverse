/**
 * Creates a new object by mapping the keys of the input object using a callback function.
 *
 * For each key-value pair in the source object, the callback is invoked with (value, key, index),
 * and the result of the callback is used as the key in the returned object, with the original value as its value.
 *
 * @param {Object} sourceObject - The object whose keys will be mapped.
 * @param {Function} keyMapperCallback - The function to generate new keys. Receives (value, key, index).
 * @returns {Object} a new object with keys generated by the callback and values from the source object.
 */
function mapKeysByCallback(sourceObject, keyMapperCallback) {
  const resultObject = {};
  // Ensure the callback has an arity of 3 (value, key, index)
  const normalizedCallback = getConfiguredIteratee(keyMapperCallback, 3);
  // Iterate over each property in the source object
  _3(sourceObject, function (value, key, index) {
    // Map the key using the callback and assign the value to the new key
    setObjectPropertySafely(resultObject, normalizedCallback(value, key, index), value);
  });
  return resultObject;
}

module.exports = mapKeysByCallback;