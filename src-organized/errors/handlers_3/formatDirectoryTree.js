/**
 * Recursively formats a directory tree structure into a readable string representation.
 *
 * Each directory and file is listed with indentation to represent its depth in the tree.
 * The root level includes a header generated by the iA() function and a line break (UO).
 *
 * @param {Array<Object>} entries - Array of directory or file objects to format. Each object must have a 'name', 'type', and optional 'children' array.
 * @param {number} depth - Current depth in the directory tree (used for indentation). Defaults to 0.
 * @param {string} indent - Current indentation string. Defaults to an empty string.
 * @returns {string} - Formatted string representing the directory tree.
 */
function formatDirectoryTree(entries, depth = 0, indent = "") {
  let formattedTree = "";

  // Add root header if at the top level
  if (depth === 0) {
    formattedTree += `- ${iA()}${UO}\n`;
    indent = "  ";
  }

  for (const entry of entries) {
    // Add current entry (directory or file) to the output
    formattedTree += `${indent}- ${entry.name}${entry.type === "directory" ? UO : ""}\n`;

    // If the entry is a directory with children, recursively format its children
    if (entry.children && entry.children.length > 0) {
      formattedTree += formatDirectoryTree(entry.children, depth + 1, `${indent}  `);
    }
  }

  return formattedTree;
}

module.exports = formatDirectoryTree;
