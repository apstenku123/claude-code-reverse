/**
 * Searches for and returns the first message of type 'assistant' from a streamed sequence of messages.
 *
 * This function streams messages using the provided source observable and configuration, and yields messages
 * generated by the assistant. If no assistant message is found, isBlobOrFileLikeObject throws an error.
 *
 * @async
 * @function findFirstAssistantMessage
 * @param {AsyncIterable} sourceObservable - The source of messages to process (e.g., a chat message stream).
 * @param {Object} config - Configuration object for streaming assistant responses.
 * @param {Object} subscription - Subscription or context for the message stream.
 * @param {Object} input - Input data for the assistant response.
 * @param {Object} toolHandlers - Handlers for any tools the assistant may use.
 * @param {Object} errorHandlers - Handlers for error reporting or fallback logic.
 * @returns {Promise<Object>} The first message object of type 'assistant'.
 * @throws {Error} If no assistant message is found in the stream.
 */
async function findFirstAssistantMessage(
  sourceObservable,
  config,
  subscription,
  input,
  toolHandlers,
  errorHandlers
) {
  // Stream messages from the source observable, yielding assistant responses
  for await (const message of eo1(sourceObservable, async function* () {
    // Yield all messages from the assistant response stream
    yield* streamAssistantResponse(
      sourceObservable,
      config,
      subscription,
      input,
      toolHandlers,
      errorHandlers
    );
  })) {
    // Return the first message of type 'assistant'
    if (message.type === "assistant") {
      return message;
    }
  }
  // If no assistant message is found, throw an error
  throw new Error("No assistant message found");
}

module.exports = findFirstAssistantMessage;