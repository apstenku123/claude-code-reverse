/**
 * Validates the number of interaction entries and throws errors if limits are exceeded.
 *
 * This function checks if the provided config is not already present in the config set and if the number of interaction entries
 * in the sourceObservable exceeds a predefined limit. If so, isBlobOrFileLikeObject throws an error. It also checks if the decoded interaction entry count
 * is above a certain threshold and throws an error if necessary.
 *
 * @async
 * @function validateInteractionEntriesAsync
 * @param {string} sourceObservable - Encoded string representing interaction entries.
 * @param {string} config - Configuration key or identifier for the current operation.
 * @param {object} subscription - Subscription or context object passed to downstream async validation.
 * @throws {Error} If the number of interaction entries exceeds allowed limits.
 */
async function validateInteractionEntriesAsync(sourceObservable, config, subscription) {
  // Check if the config is not already present and the number of entries exceeds the limit
  if (!cV1.has(config) && sourceObservable.length > lV1) {
    // Throw an error with a message generated by Fo1
    throw new Error(Fo1(sourceObservable.length));
  }

  // Get the count of interaction entries from the encoded string
  const interactionEntryCount = getInteractionEntryCount(sourceObservable);

  // If there are entries and the count exceeds a quarter of the allowed maximum
  if (interactionEntryCount && interactionEntryCount > ye / 4) {
    // Await the result of an async validation (possibly a deeper check)
    const decodedEntryCount = await sendUserMessage(sourceObservable, subscription);
    // If the decoded entry count exceeds the maximum allowed, throw an error
    if (decodedEntryCount && decodedEntryCount > ye) {
      throw new Error(getFileContentTokenLimitMessage(decodedEntryCount));
    }
  }
}

module.exports = validateInteractionEntriesAsync;