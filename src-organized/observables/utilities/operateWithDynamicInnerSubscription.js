/**
 * Applies a custom operator to an observable, dynamically subscribing to an inner observable
 * generated by the provided processInteractionEntries function. Ensures proper subscription
 * management and prevents duplicate or unnecessary entries.
 *
 * @param {Function} processInteractionEntries - Function that processes interaction entries and returns an observable.
 * @returns {Function} Operator function to be used with an observable.
 */
function operateWithDynamicInnerSubscription(processInteractionEntries) {
  return rT9.operate(function (sourceObservable, destinationSubscriber) {
    let outerSubscription = null;
    let hasCompletedSynchronously = false;
    let innerObservable;

    // Subscribe to the source observable with a custom operator subscriber
    outerSubscription = sourceObservable.subscribe(
      sT9.createOperatorSubscriber(
        destinationSubscriber,
        undefined,
        undefined,
        /**
         * onNext handler for the source observable.
         * @param {*} interactionEntry - The current interaction entry emitted by the source observable.
         */
        function onNext(interactionEntry) {
          // Create an inner observable from the processed interaction entry
          innerObservable = aT9.innerFrom(
            processInteractionEntries(
              interactionEntry,
              operateWithDynamicInnerSubscription(processInteractionEntries)(sourceObservable)
            )
          );

          if (outerSubscription) {
            // Unsubscribe from the outer observable to avoid duplicate emissions
            outerSubscription.unsubscribe();
            outerSubscription = null;
            // Subscribe to the inner observable and forward emissions to the destination
            innerObservable.subscribe(destinationSubscriber);
          } else {
            // If already unsubscribed, mark for synchronous completion
            hasCompletedSynchronously = true;
          }
        }
      )
    );

    // If the emission happened synchronously after unsubscription, handle isBlobOrFileLikeObject here
    if (hasCompletedSynchronously) {
      if (outerSubscription) {
        outerSubscription.unsubscribe();
        outerSubscription = null;
      }
      innerObservable.subscribe(destinationSubscriber);
    }
  });
}

module.exports = operateWithDynamicInnerSubscription;